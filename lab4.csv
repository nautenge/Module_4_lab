// Произведите корректную (правильную) по вашему мнению реализацию с применением принципа Single-Responsibility Principle (SRP)
public class Invoice
{
    public int Id { get; set; }
    public List<Item> Items { get; set; } = new List<Item>();
    public double TaxRate { get; set; }
}



public class InvoiceCalculator
{
    public double CalculateTotal(Invoice invoice)
    {
        double subTotal = 0;
        foreach (var item in invoice.Items)
        {
            subTotal += item.Price;
        }
        return subTotal + (subTotal * invoice.TaxRate);
    }
}



public class InvoiceRepository
{
    public void SaveToDatabase(Invoice invoice)
    {
        // Логика для сохранения счета-фактуры в базу данных
        Console.WriteLine($"Invoice {invoice.Id} saved to database.");
    }
}



public class Item
{
    public string Name { get; set; }
    public double Price { get; set; }
}



class Program
{
    static void Main(string[] args)
    {
        // Создаем экземпляр счета-фактуры
        var invoice = new Invoice
        {
            Id = 1,
            TaxRate = 0.2 // 20% налог
        };

        // Добавляем товары в счет-фактуру
        invoice.Items.Add(new Item { Name = "Product A", Price = 100 });
        invoice.Items.Add(new Item { Name = "Product B", Price = 200 });

        // Рассчитываем общую стоимость
        var calculator = new InvoiceCalculator();
        double total = calculator.CalculateTotal(invoice);
        Console.WriteLine($"Total amount: {total}");

        // Сохраняем счет-фактуру в базу данных
        var repository = new InvoiceRepository();
        repository.SaveToDatabase(invoice);
    }
}
////////////////////////////////////////////////////////////////

// Произведите корректную (правильную) по вашему мнению реализацию с применением принципа Open-Closed Principle, OCP

public interface IDiscountStrategy
{
    double CalculateDiscount(double amount);
}



public class RegularDiscount : IDiscountStrategy
{
    public double CalculateDiscount(double amount)
    {
        return amount; // Нет скидки
    }
}

public class SilverDiscount : IDiscountStrategy
{
    public double CalculateDiscount(double amount)
    {
        return amount * 0.9; // 10% скидка
    }
}

public class GoldDiscount : IDiscountStrategy
{
    public double CalculateDiscount(double amount)
    {
        return amount * 0.8; // 20% скидка
    }
}

public class PlatinumDiscount : IDiscountStrategy
{
    public double CalculateDiscount(double amount)
    {
        return amount * 0.7; // 30% скидка
    }
}



public class DiscountCalculator
{
    private readonly IDiscountStrategy _discountStrategy;

    public DiscountCalculator(IDiscountStrategy discountStrategy)
    {
        _discountStrategy = discountStrategy;
    }

    public double CalculateDiscount(double amount)
    {
        return _discountStrategy.CalculateDiscount(amount);
    }
}



class Program
{
    static void Main(string[] args)
    {
        double amount = 1000;

        // Пример использования для разных типов клиентов
        DiscountCalculator regularCalculator = new DiscountCalculator(new RegularDiscount());
        Console.WriteLine("Regular customer: " + regularCalculator.CalculateDiscount(amount));

        DiscountCalculator silverCalculator = new DiscountCalculator(new SilverDiscount());
        Console.WriteLine("Silver customer: " + silverCalculator.CalculateDiscount(amount));

        DiscountCalculator goldCalculator = new DiscountCalculator(new GoldDiscount());
        Console.WriteLine("Gold customer: " + goldCalculator.CalculateDiscount(amount));

        DiscountCalculator platinumCalculator = new DiscountCalculator(new PlatinumDiscount());
        Console.WriteLine("Platinum customer: " + platinumCalculator.CalculateDiscount(amount));
    }
}
//////////////////////////////////////////////

// Произведите корректную (правильную) по вашему мнению реализацию с применением принципа Interface Segregation Principle, ISP:

public interface IWorkable
{
    void Work();
}

public interface IEatable
{
    void Eat();
}

public interface ISleepable
{
    void Sleep();
}



public class HumanWorker : IWorkable, IEatable, ISleepable
{
    public void Work()
    {
        // Логика работы
    }

    public void Eat()
    {
        // Логика питания
    }

    public void Sleep()
    {
        // Логика сна
    }
}



public class RobotWorker : IWorkable
{
    public void Work()
    {
        // Логика работы
    }
}




class Program
{
    static void Main(string[] args)
    {
        IWorkable human = new HumanWorker();
        human.Work();
        
        IEatable humanEater = (IEatable)human;
        humanEater.Eat();
        
        ISleepable humanSleeper = (ISleepable)human;
        humanSleeper.Sleep();

        IWorkable robot = new RobotWorker();
        robot.Work();
        
        // Robot не может есть или спать, так что эти методы не будут вызываться.
    }
}
///////////////////////////////////////////////////

// Произведите корректную (правильную) по вашему мнению реализацию с применением принципа Dependency-Inversion Principle, DIP

public interface INotificationService
{
    void SendNotification(string message);
}



public class EmailService : INotificationService
{
    public void SendNotification(string message)
    {
        Console.WriteLine($"Отправка Email: {message}");
    }
}



public class SmsService : INotificationService
{
    public void SendNotification(string message)
    {
        Console.WriteLine($"Отправка SMS: {message}");
    }
}



public class Notification
{
    private readonly INotificationService _notificationService;

    public Notification(INotificationService notificationService)
    {
        _notificationService = notificationService;
    }

    public void Send(string message)
    {
        _notificationService.SendNotification(message);
    }
}




class Program
{
    static void Main(string[] args)
    {
        // Используем EmailService
        INotificationService emailService = new EmailService();
        Notification emailNotification = new Notification(emailService);
        emailNotification.Send("Привет, это тестовое сообщение по Email!");

        // Используем SmsService
        INotificationService smsService = new SmsService();
        Notification smsNotification = new Notification(smsService);
        smsNotification.Send("Привет, это тестовое сообщение по SMS!");
    }
}
